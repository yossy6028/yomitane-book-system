import React, { useState, useEffect } from 'react';
import './App.css';
import BookList from './components/BookList';
import AdminPanel from './components/AdminPanel';
import { UserProfile, recommendationService } from './services/recommendationService';
import { generateMixedTest, calculateTestResult, analyzeTestPerformance, MixedTestQuestion } from './data/mixedTestQuestions';

function App() {
  const [currentView, setCurrentView] = useState<'main' | 'books' | 'admin'>('main');
  const [currentStep, setCurrentStep] = useState(1);
  const [userProfile, setUserProfile] = useState<Partial<UserProfile>>({});

  const renderView = () => {
    switch(currentView) {
      case 'books':
        return <BookList onBack={() => setCurrentView('main')} />;
      case 'admin':
        return <AdminPanel onBack={() => setCurrentView('main')} />;
      case 'main':
      default:
        return renderMainSteps();
    }
  };

  const renderMainSteps = () => {
    switch(currentStep) {
      case 1:
        return <WelcomeStep 
          onNext={() => setCurrentStep(2)} 
          onViewBooks={() => setCurrentView('books')}
          onAdmin={() => setCurrentView('admin')}
        />;
      case 2:
        return <SurveyStep 
          onNext={() => setCurrentStep(3)} 
          onBack={() => setCurrentStep(1)}
          userProfile={userProfile}
          setUserProfile={setUserProfile}
        />;
      case 3:
        return <TestStep 
          onNext={() => setCurrentStep(4)} 
          onBack={() => setCurrentStep(2)}
          userProfile={userProfile}
          setUserProfile={setUserProfile}
        />;
      case 4:
        return <ResultsStep 
          userProfile={userProfile as UserProfile} 
          onBack={() => setCurrentStep(3)} 
          onRestart={() => setCurrentStep(1)} 
        />;
      default:
        return <WelcomeStep 
          onNext={() => setCurrentStep(2)} 
          onViewBooks={() => setCurrentView('books')}
          onAdmin={() => setCurrentView('admin')}
        />;
    }
  };

  return (
    <div className="App">
      <header className="App-header">
        <img src="/tanemo-logo.png" alt="TANEMO" className="tanemo-logo" />
        <h1>本のおすすめシステム</h1>
        <p>きみにぴったりの本を見つけよう！</p>
      </header>
      <main className="App-main">
        {renderView()}
      </main>
    </div>
  );
}

// Welcome Step Component
const WelcomeStep: React.FC<{
  onNext: () => void;
  onViewBooks: () => void;
  onAdmin: () => void;
}> = ({ onNext, onViewBooks, onAdmin }) => (
  <div className="step-container">
    <h2>🌟 はじめに</h2>
    <p>こんにちは！このシステムでは、きみの年齢や好きなことを教えてもらって、ぴったりの本をおすすめします。</p>
    <p>簡単なアンケートと小さなテストがあるよ。</p>
    
    <div className="welcome-buttons">
      <button className="primary-button" onClick={onNext}>
        はじめる 🚀
      </button>
      
      <button className="secondary-button" onClick={onViewBooks}>
        📚 図書一覧を見る
      </button>
      
      <button className="admin-button" onClick={onAdmin}>
        ⚙️ 管理者パネル
      </button>
    </div>
    
    <div className="welcome-features">
      <div className="feature-item">
        <span className="feature-icon">🎯</span>
        <span className="feature-text">きみにあった本を見つける</span>
      </div>
      <div className="feature-item">
        <span className="feature-icon">📖</span>
        <span className="feature-text">たくさんの本から選べる</span>
      </div>
      <div className="feature-item">
        <span className="feature-icon">🔄</span>
        <span className="feature-text">定期的に新しい本が追加される</span>
      </div>
    </div>
  </div>
);

// Survey Step Component  
const SurveyStep: React.FC<{
  onNext: () => void, 
  onBack: () => void,
  userProfile: Partial<UserProfile>,
  setUserProfile: (profile: Partial<UserProfile>) => void
}> = ({ onNext, onBack, userProfile, setUserProfile }) => {
  const [selectedInterests, setSelectedInterests] = useState<string[]>(userProfile.interests || []);
  const [age, setAge] = useState<number>(userProfile.age || 0);
  const [readingLevel, setReadingLevel] = useState<string>(userProfile.readingLevel || '');
  const [personality, setPersonality] = useState<string[]>(userProfile.personalityTraits || []);

  const handleNext = () => {
    setUserProfile({
      ...userProfile,
      age,
      interests: selectedInterests,
      readingLevel: readingLevel as '小学校低学年' | '小学校中学年' | '小学校高学年' | '中学生' | '中学受験レベル' | '高校受験レベル',
      personalityTraits: personality
    });
    onNext();
  };

  const handleInterestChange = (interest: string, checked: boolean) => {
    if (checked) {
      setSelectedInterests([...selectedInterests, interest]);
    } else {
      setSelectedInterests(selectedInterests.filter(i => i !== interest));
    }
  };

  const handlePersonalityChange = (trait: string, checked: boolean) => {
    if (checked) {
      setPersonality([...personality, trait]);
    } else {
      setPersonality(personality.filter(t => t !== trait));
    }
  };

  return (
    <div className="step-container">
      <h2>📝 アンケート</h2>
      
      <div className="form-group">
        <label>年齢を教えてね:</label>
        <select value={age} onChange={(e) => setAge(Number(e.target.value))}>
          <option value={0}>選択してください</option>
          {Array.from({length: 10}, (_, i) => i + 6).map(age => (
            <option key={age} value={age}>{age}歳</option>
          ))}
        </select>
      </div>

      <div className="form-group">
        <label>興味（きょうみ）があることは？ (いくつでも選んでね):</label>
        <div className="checkbox-group">
          {[
            'スポーツ', '音楽', '絵を描く', 'ゲーム', '動物', '科学', '料理', '冒険',
            '読書', '映画・アニメ', '工作・手芸', '歴史', '宇宙・天体', '乗り物',
            '旅行・地理', '推理・謎解き', 'ファンタジー', '友情・恋愛', '家族', '学校生活'
          ].map(interest => (
            <label key={interest} className="checkbox-label">
              <input 
                type="checkbox" 
                checked={selectedInterests.includes(interest)}
                onChange={(e) => handleInterestChange(interest, e.target.checked)}
              />
              {interest}
            </label>
          ))}
        </div>
      </div>

      <div className="form-group">
        <label>読書のレベルは？:</label>
        <select value={readingLevel} onChange={(e) => setReadingLevel(e.target.value)}>
          <option value="">選択してください</option>
          <option value="小学校低学年">低学年レベル（ひらがなが多い本）</option>
          <option value="小学校中学年">中学年レベル（漢字まじりの本）</option>
          <option value="小学校高学年">高学年レベル（少し難しい本）</option>
          <option value="中学生">中学生レベル（難しい本もOK）</option>
          <option value="中学受験レベル">中学受験レベル（高学年〜中学生向け）</option>
          <option value="高校受験レベル">高校受験レベル（中学ハイレベル）</option>
        </select>
      </div>

      <div className="form-group">
        <label>きみの性格は？ (いくつでも選んでね):</label>
        <div className="checkbox-group">
          {[
            '勇敢', '優しい', '好奇心旺盛', '活発', '芸術的', '思いやり', '論理的', 'ユーモア好き',
            '慎重', '社交的', '内向的', '創造的', '責任感が強い', '自立している', '協調性がある', 'リーダーシップがある',
            '感受性が豊か', '集中力がある', '冒険好き', '平和主義'
          ].map(trait => (
            <label key={trait} className="checkbox-label">
              <input 
                type="checkbox" 
                checked={personality.includes(trait)}
                onChange={(e) => handlePersonalityChange(trait, e.target.checked)}
              />
              {trait}
            </label>
          ))}
        </div>
      </div>

      <div className="button-group">
        <button className="secondary-button" onClick={onBack}>もどる</button>
        <button 
          className="primary-button" 
          onClick={handleNext}
          disabled={!age || selectedInterests.length === 0 || !readingLevel}
        >
          つぎへ
        </button>
      </div>
    </div>
  );
};

// Test Step Component
const TestStep: React.FC<{
  onNext: () => void, 
  onBack: () => void,
  userProfile: Partial<UserProfile>,
  setUserProfile: (profile: Partial<UserProfile>) => void
}> = ({ onNext, onBack, userProfile, setUserProfile }) => {
  const [answers, setAnswers] = useState<{[key: string]: string}>({});
  const [questions, setQuestions] = useState<MixedTestQuestion[]>([]);

  useEffect(() => {
    // 年齢に応じた語彙+常識の混合テストを生成（語彙5問 + 常識5問）
    const mixedQuestions = generateMixedTest(userProfile.age || 10, 5, 5);
    setQuestions(mixedQuestions);
    setAnswers({}); // 問題が変わったら回答をリセット
  }, [userProfile.age]);

  // 問題が読み込まれていない場合のフォールバック
  if (questions.length === 0) {
    return (
      <div className="step-container">
        <h2>🧠 {userProfile.age}歳向けテスト</h2>
        <p>問題を準備しています...</p>
        <div className="button-group">
          <button className="secondary-button" onClick={onBack}>もどる</button>
        </div>
      </div>
    );
  }

  const handleNext = () => {
    // 新しい総合テスト結果計算
    const testResult = calculateTestResult(questions, answers, userProfile.age || 10);
    const analysis = analyzeTestPerformance(testResult);
    
    setUserProfile({
      ...userProfile,
      vocabularyScore: testResult.overallLevel, // 総合レベルを語彙スコアとして使用
      testResult: testResult, // 詳細な結果も保存
      testAnalysis: analysis // 分析結果も保存
    });
    onNext();
  };

  return (
    <div className="step-container">
      <h2>🧠 {userProfile.age}歳向け総合テスト</h2>
      <p>{userProfile.age}歳のきみの語彙力と常識力をチェックするよ！全部で{questions.length}問です。</p>
      <p className="test-info">💡 語彙力と常識力の両方を測定し、問題は毎回ランダムに変わります</p>
      
      {questions.map((q, index) => (
        <div key={q.id} className="question">
          <div className="question-header">
            <p><strong>問題{index + 1}:</strong> {q.question}</p>
            <span className={`question-type ${q.type}`}>
              {q.type === 'vocabulary' ? '📝語彙' : '🧭常識'}
            </span>
          </div>
          <div className="radio-group">
            {q.options.map((option, optIndex) => (
              <label key={optIndex}>
                <input 
                  type="radio" 
                  name={q.id} 
                  value={optIndex}
                  checked={answers[q.id] === optIndex.toString()}
                  onChange={(e) => setAnswers({...answers, [q.id]: e.target.value})}
                /> 
                {option}
              </label>
            ))}
          </div>
        </div>
      ))}
      
      <div className="button-group">
        <button className="secondary-button" onClick={onBack}>もどる</button>
        <button 
          className="primary-button" 
          onClick={handleNext}
          disabled={Object.keys(answers).length < questions.length}
        >
          結果を見る
        </button>
      </div>
    </div>
  );
};

// Results Step Component
const ResultsStep: React.FC<{
  userProfile: UserProfile,
  onBack: () => void, 
  onRestart: () => void
}> = ({ userProfile, onBack, onRestart }) => {
  const [recommendations, setRecommendations] = useState<any[]>([]);
  const [selectedBook, setSelectedBook] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const fetchRecommendations = async () => {
      setIsLoading(true);
      try {
        const recs = await recommendationService.getRecommendations(userProfile, 3);
        setRecommendations(recs);
      } catch (error) {
        console.error('推薦取得エラー:', error);
        setRecommendations([]);
      } finally {
        setIsLoading(false);
      }
    };

    fetchRecommendations();
  }, [userProfile]);

  const getReadingLevelLabel = (level: string) => {
    switch (level) {
      case '小学校低学年': return '低学年レベル';
      case '小学校中学年': return '中学年レベル';
      case '小学校高学年': return '高学年レベル';
      case '中学生': return '中学生レベル';
      case '中学受験レベル': return '中学受験レベル';
      case '高校受験レベル': return '高校受験レベル';
      // 旧形式との互換性
      case 'elementary-low': return '低学年レベル';
      case 'elementary-mid': return '中学年レベル';
      case 'elementary-high': return '高学年レベル';
      case 'junior-high': return '中学生レベル';
      default: return level;
    }
  };

  const getStarRating = (rating: number) => {
    return '⭐'.repeat(Math.floor(rating)) + '☆'.repeat(5 - Math.floor(rating));
  };

  return (
    <div className="step-container">
      <h2>🎉 {userProfile.age}歳のきみにおすすめの本</h2>
      
      <div className="user-summary">
        <h3>📋 きみのプロフィール</h3>
        <div className="profile-summary">
          <span className="profile-item">年齢: {userProfile.age}歳</span>
          <span className="profile-item">読書レベル: {getReadingLevelLabel(userProfile.readingLevel)}</span>
          <span className="profile-item">総合レベル: {userProfile.vocabularyScore}/10</span>
          {userProfile.testResult && (
            <>
              <span className="profile-item">語彙力: {userProfile.testResult.vocabularyScore}/100</span>
              <span className="profile-item">常識力: {userProfile.testResult.commonSenseScore}/100</span>
            </>
          )}
        </div>
        <div className="profile-interests">
          <strong>好きなこと:</strong> {userProfile.interests.join('・')}
        </div>
        {userProfile.personalityTraits.length > 0 && (
          <div className="profile-personality">
            <strong>性格:</strong> {userProfile.personalityTraits.join('・')}
          </div>
        )}
        
      </div>

      <div className="recommendations">
        <h3>📚 きみにぴったりの本 ({recommendations.length}冊)</h3>
        
        {isLoading ? (
          <div className="loading">
            <p>🔍 きみにぴったりの本を探しています...</p>
            <div className="spinner">🌟</div>
          </div>
        ) : recommendations.length === 0 ? (
          <div className="no-recommendations">
            <p>申し訳ありません。現在の図書データベースでは、きみのプロフィールに合う本が見つかりませんでした。</p>
            <p>管理者パネルから図書更新を行うと、より多くの本が見つかるかもしれません。</p>
          </div>
        ) : (
          <div className="recommendation-list">
            {recommendations.map((rec, index) => (
              <div 
                key={rec.book.id} 
                className={`recommendation-card ${selectedBook?.book?.id === rec.book.id ? 'selected' : ''}`}
                onClick={() => setSelectedBook(selectedBook?.book?.id === rec.book.id ? null : rec)}
              >
                <div className="recommendation-header">
                  <div className="book-basic-info">
                    <h4>#{index + 1} 「{rec.book.title}」</h4>
                    <p className="book-author">著者: {rec.book.author}</p>
                    <div className="book-meta-compact">
                      <span className="age-range">{rec.book.ageRange.min}-{rec.book.ageRange.max}歳</span>
                      <span className="reading-level">{getReadingLevelLabel(rec.book.readingLevel)}</span>
                      <span className="rating">{getStarRating(rec.book.rating)}</span>
                      <span className="match-score">マッチ度: {Math.round(rec.score)}%</span>
                    </div>
                  </div>
                  {rec.book.coverImage && (
                    <img src={rec.book.coverImage} alt={rec.book.title} className="recommendation-cover" />
                  )}
                </div>

                <div className="recommendation-reasons">
                  <strong>📍 おすすめの理由:</strong>
                  <ul>
                    {rec.reasons.map((reason: string, i: number) => (
                      <li key={i}>{reason}</li>
                    ))}
                  </ul>
                </div>

                {selectedBook?.book?.id === rec.book.id && (
                  <div className="book-details">
                    <div className="book-description">
                      <strong>📖 あらすじ:</strong>
                      <p>{rec.book.description}</p>
                    </div>
                    
                    <div className="book-categories">
                      <strong>🏷️ ジャンル:</strong>
                      {rec.book.categories.map((cat: string) => (
                        <span key={cat} className="category-tag">{cat}</span>
                      ))}
                    </div>

                    <div className="book-interests">
                      <strong>🎯 興味分野:</strong>
                      {rec.book.interests.map((interest: string) => (
                        <span key={interest} className="interest-tag">{interest}</span>
                      ))}
                    </div>

                    <div className="detailed-match">
                      <strong>🔍 詳細マッチ分析:</strong>
                      <div className="match-indicators">
                        <span className={`match-indicator ${rec.matchDetails.ageMatch ? 'match' : 'no-match'}`}>
                          年齢: {rec.matchDetails.ageMatch ? '✅' : '❌'}
                        </span>
                        <span className={`match-indicator ${rec.matchDetails.levelMatch ? 'match' : 'no-match'}`}>
                          レベル: {rec.matchDetails.levelMatch ? '✅' : '❌'}
                        </span>
                        <span className={`match-indicator ${rec.matchDetails.vocabularyMatch ? 'match' : 'no-match'}`}>
                          語彙力: {rec.matchDetails.vocabularyMatch ? '✅' : '❌'}
                        </span>
                        <span className={`match-indicator ${rec.matchDetails.interestMatch.length > 0 ? 'match' : 'no-match'}`}>
                          興味: {rec.matchDetails.interestMatch.length > 0 ? '✅' : '❌'}
                        </span>
                      </div>
                    </div>

                    {rec.book.pageCount && (
                      <div className="reading-time">
                        <strong>📄 ページ数:</strong> 約{rec.book.pageCount}ページ
                      </div>
                    )}
                  </div>
                )}

                <div className="click-hint">
                  {selectedBook?.book?.id === rec.book.id ? '▲ クリックして閉じる' : '▼ クリックして詳細を見る'}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      <div className="button-group">
        <button className="secondary-button" onClick={onBack}>もどる</button>
        <button className="primary-button" onClick={onRestart}>もう一度やる</button>
      </div>
    </div>
  );
};

export default App;
